// This file is generated by Firebase Studio.
"use client";

import type { FC } from 'react';
import { useState, useEffect } from 'react';
import ProviderCard from './ProviderCard';
import type { ServiceProvider, Location as UserLocationType } from '@/types';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { SearchX, Loader2, ListFilter, MapPinned } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

const MOCK_PROVIDERS: ServiceProvider[] = [
  { 
    id: 'ax1', 
    name: 'Auto Xpress - Kampala Central', 
    phone: '(256) 772-123456', 
    etaMinutes: 15, 
    currentLocation: { lat: 0.3136, lng: 32.5811 }, 
    generalLocation: "Kampala Central",
    servicesOffered: ['Tire Services', 'Battery Replacement', 'Oil Change', 'Brake Services', 'Flat tire', 'Dead battery'] 
  },
  { 
    id: 'ax2', 
    name: 'Auto Xpress - Lugogo', 
    phone: '(256) 772-234567', 
    etaMinutes: 25, 
    currentLocation: { lat: 0.3200, lng: 32.6000 }, 
    generalLocation: "Lugogo, Kampala",
    servicesOffered: ['Suspension Work', 'Diagnostics', 'Tire Alignment', 'Jump Start', 'Engine failure'] 
  },
  { 
    id: 'ax3', 
    name: 'Auto Xpress - Ntinda', 
    phone: '(256) 772-345678', 
    etaMinutes: 20, 
    currentLocation: { lat: 0.3450, lng: 32.6120 }, 
    generalLocation: "Ntinda, Kampala",
    servicesOffered: ['Fuel Delivery (Emergency)', 'Battery Testing', 'Tire Puncture Repair', 'Minor Mechanical Repairs', 'Lockout', 'Fuel delivery'] 
  },
  { 
    id: 'ax4', 
    name: 'Auto Xpress - Acacia Mall', 
    phone: '(256) 772-456789', 
    etaMinutes: 30, 
    currentLocation: { lat: 0.3312, lng: 32.5900 }, 
    generalLocation: "Kisementi, Kampala",
    servicesOffered: ['Tire Sales & Fitting', 'Oil and Filter Change', 'Wiper Blade Replacement', 'Lockout Assistance (Limited)'] 
  },
  { 
    id: 'ax5', 
    name: 'Auto Xpress - Entebbe Town', 
    phone: '(256) 772-567890', 
    etaMinutes: 45, // Assuming further away if user is in Kampala
    currentLocation: { lat: 0.0500, lng: 32.4600 }, // Approx. Entebbe
    generalLocation: "Entebbe Town",
    servicesOffered: ['Battery Jump Start', 'Tire Inflation', 'Fluid Top-up', 'Brake Pad Replacement', 'Flat tire'] 
  },
  { 
    id: 'ax6', 
    name: 'Auto Xpress - Nakawa', 
    phone: '(256) 772-678901', 
    etaMinutes: 22, 
    currentLocation: { lat: 0.3300, lng: 32.6150 }, 
    generalLocation: "Nakawa, Kampala",
    servicesOffered: ['Full Service Maintenance', 'Tire Balancing', 'Air Conditioning Recharge', 'Diagnostics', 'Engine failure'] 
  },
   { 
    id: 'ax7', 
    name: 'Auto Xpress - Mukono Town', 
    phone: '(256) 773-112233', 
    etaMinutes: 55, // Assuming further away
    currentLocation: { lat: 0.3550, lng: 32.7500 }, // Approx. Mukono
    generalLocation: "Mukono Town",
    servicesOffered: ['Tire Services', 'Battery Replacement', 'Minor Mechanical Repairs', 'Jump Start'] 
  },
  { 
    id: 'ax8', 
    name: 'Auto Xpress - Jinja City', 
    phone: '(256) 774-445566', 
    etaMinutes: 90, // Assuming further away
    currentLocation: { lat: 0.4320, lng: 33.2030 }, // Approx. Jinja
    generalLocation: "Jinja City",
    servicesOffered: ['Full Service Maintenance', 'Diagnostics', 'Tire Alignment', 'Brake Services'] 
  }
];

function calculateDistance(loc1: UserLocationType, loc2: UserLocationType): number {
  const R = 6371; // Radius of the Earth in km
  const dLat = (loc2.lat - loc1.lat) * Math.PI / 180;
  const dLng = (loc2.lng - loc1.lng) * Math.PI / 180;
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(loc1.lat * Math.PI / 180) * Math.cos(loc2.lat * Math.PI / 180) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

const ProviderList: FC<ProviderListProps> = ({ userLocation, issueType, onSelectProvider }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [displayedProviders, setDisplayedProviders] = useState<ServiceProvider[]>([]);
  const [noSpecificMatch, setNoSpecificMatch] = useState(false);

  useEffect(() => {
    setIsLoading(true);
    setNoSpecificMatch(false);
    
    setTimeout(() => {
      let primaryFilteredProviders = MOCK_PROVIDERS;
      
      if (issueType && issueType.trim() !== "") {
        const lowerIssueType = issueType.toLowerCase();
        primaryFilteredProviders = MOCK_PROVIDERS.filter(p => 
          p.servicesOffered.some(service => 
            service.toLowerCase().includes(lowerIssueType) || 
            lowerIssueType.includes(service.toLowerCase())
          )
        );
      }
      
      if (userLocation) {
        primaryFilteredProviders = primaryFilteredProviders.map(p => ({
          ...p,
          distanceKm: calculateDistance(userLocation, p.currentLocation)
        })).sort((a,b) => (a.distanceKm ?? Infinity) - (b.distanceKm ?? Infinity));
      } else {
         primaryFilteredProviders = primaryFilteredProviders.map(p => ({ ...p, distanceKm: undefined })).sort((a,b) => a.etaMinutes - b.etaMinutes);
      }

      if (primaryFilteredProviders.length > 0) {
        setDisplayedProviders(primaryFilteredProviders);
      } else {
        setNoSpecificMatch(true);
        // Fallback: show all providers, sorted by ETA if no location, or by name.
        let fallbackProviders = MOCK_PROVIDERS.map(p => userLocation ? ({...p, distanceKm: calculateDistance(userLocation, p.currentLocation)}) : ({...p, distanceKm: undefined}));
        if (userLocation) {
            fallbackProviders.sort((a,b) => (a.distanceKm ?? Infinity) - (b.distanceKm ?? Infinity));
        } else {
            fallbackProviders.sort((a,b) => a.etaMinutes - b.etaMinutes);
        }
        setDisplayedProviders(fallbackProviders);
      }
      setIsLoading(false);
    }, 1500); 
  }, [userLocation, issueType]);

  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center p-10 text-muted-foreground w-full min-h-[40vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
        <p className="text-lg font-medium">Finding Auto Xpress garages...</p>
        <p className="text-sm">Please wait a moment.</p>
      </div>
    );
  }
  
  return (
    <Card className="w-full max-w-3xl mx-auto shadow-xl">
      <CardHeader>
        <CardTitle className="text-2xl flex items-center">
            <ListFilter className="mr-2 h-6 w-6 text-primary"/>
            Available Auto Xpress Garages
        </CardTitle>
        {noSpecificMatch ? (
           <CardDescription className="text-sm">
            No garages perfectly matched your criteria for "{issueType || 'your issue'}" {userLocation ? 'nearby' : ''}. 
            Showing all available garages. Consider contacting them directly or checking major towns like Entebbe, Mukono, or Jinja if you are outside Kampala.
          </CardDescription>
        ) : (
          <CardDescription className="text-sm">
            Showing Auto Xpress garages {issueType ? `that can handle "${issueType}"` : ''} {userLocation ? 'sorted by distance.' : 'sorted by ETA.'}
          </CardDescription>
        )}
      </CardHeader>
      <CardContent>
        {displayedProviders.length === 0 && !noSpecificMatch ? ( // Should ideally not happen if MOCK_PROVIDERS is not empty
            <Alert variant="default" className="mt-4">
              <SearchX className="h-5 w-5" />
              <AlertTitle className="font-semibold">No Auto Xpress Garages Found</AlertTitle>
              <AlertDescription>
                Unfortunately, we couldn't find any Auto Xpress garages at this time. 
                Please try again later.
              </AlertDescription>
            </Alert>
        ) : (
          <ScrollArea className="h-[calc(100vh-420px)] min-h-[300px] pr-3">
            <div className="space-y-4">
              {displayedProviders.map((provider) => (
                <ProviderCard key={provider.id} provider={provider} onSelectProvider={onSelectProvider} />
              ))}
            </div>
          </ScrollArea>
        )}
      </CardContent>
    </Card>
  );
};

export default ProviderList;
