
// This file is generated by Firebase Studio.
"use client";

import type { FC } from 'react';
import { useState, useEffect } from 'react';
import ProviderCard from './ProviderCard';
import type { ServiceProvider, Location as UserLocationType } from '@/types';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { SearchX, Loader2, ListFilter, MapPinned } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { getAllGarages } from '@/services/garageService'; // Import Firestore service

interface ProviderListProps {
  userLocation: UserLocationType | null;
  issueType: string;
  onSelectProvider: (provider: ServiceProvider) => void;
}

function calculateDistance(loc1: UserLocationType, loc2: UserLocationType): number {
  const R = 6371; // Radius of the Earth in km
  const dLat = (loc2.lat - loc1.lat) * Math.PI / 180;
  const dLng = (loc2.lng - loc1.lng) * Math.PI / 180;
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(loc1.lat * Math.PI / 180) * Math.cos(loc2.lat * Math.PI / 180) *
    Math.sin(dLng / 2) * Math.sin(dLng / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

const ProviderList: FC<ProviderListProps> = ({ userLocation, issueType, onSelectProvider }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [allProviders, setAllProviders] = useState<ServiceProvider[]>([]);
  const [displayedProviders, setDisplayedProviders] = useState<ServiceProvider[]>([]);
  const [noSpecificMatch, setNoSpecificMatch] = useState(false);

  useEffect(() => {
    const fetchAndSetProviders = async () => {
      setIsLoading(true);
      try {
        const garages = await getAllGarages();
        setAllProviders(garages);
      } catch (error) {
        console.error("Error fetching garages for ProviderList:", error);
        setAllProviders([]); // Set to empty array on error
      } finally {
        setIsLoading(false); // Set loading to false after initial fetch attempt
      }
    };
    fetchAndSetProviders();
  }, []); // Fetch only once on mount


  useEffect(() => {
    // This effect runs when allProviders, userLocation, or issueType changes,
    // but only processes if allProviders is populated and not currently loading them.
    if (allProviders.length === 0 && !isLoading) { // If no providers and not loading, nothing to do
      setDisplayedProviders([]);
      setIsLoading(false); // Ensure loading is false if it was true due to initial empty allProviders
      return;
    }
    if (isLoading) return; // Don't process if initial load of allProviders is still happening


    setNoSpecificMatch(false);
    let primaryFilteredProviders = [...allProviders]; 
      
    if (issueType && issueType.trim() !== "") {
      const lowerIssueType = issueType.toLowerCase();
      primaryFilteredProviders = allProviders.filter(p => 
        Array.isArray(p.servicesOffered) && p.servicesOffered.some(service => 
          service.toLowerCase().includes(lowerIssueType) || 
          lowerIssueType.includes(service.toLowerCase()) 
        )
      );
    }
    
    if (userLocation) {
      primaryFilteredProviders = primaryFilteredProviders.map(p => ({
        ...p,
        distanceKm: calculateDistance(userLocation, p.currentLocation)
      })).sort((a,b) => (a.distanceKm ?? Infinity) - (b.distanceKm ?? Infinity));
    } else {
        primaryFilteredProviders = primaryFilteredProviders.map(p => ({ ...p, distanceKm: undefined })).sort((a,b) => a.etaMinutes - b.etaMinutes);
    }

    if (primaryFilteredProviders.length > 0) {
      setDisplayedProviders(primaryFilteredProviders);
    } else {
      setNoSpecificMatch(true);
      let fallbackProviders = [...allProviders].map(p => userLocation ? ({...p, distanceKm: calculateDistance(userLocation, p.currentLocation)}) : ({...p, distanceKm: undefined}));
      if (userLocation) {
          fallbackProviders.sort((a,b) => (a.distanceKm ?? Infinity) - (b.distanceKm ?? Infinity));
      } else {
          fallbackProviders.sort((a,b) => a.etaMinutes - b.etaMinutes);
      }
      setDisplayedProviders(fallbackProviders);
    }
    // No need to setIsLoading(false) here as it's handled by the fetch effect
  }, [userLocation, issueType, allProviders, isLoading]); // isLoading is key here

  if (isLoading && displayedProviders.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center p-10 text-muted-foreground w-full flex-grow">
        <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
        <p className="text-lg font-medium">Finding Auto Xpress garages...</p>
        <p className="text-sm">Please wait a moment.</p>
      </div>
    );
  }
  
  return (
    <Card className="w-full max-w-3xl mx-auto shadow-xl flex flex-col flex-grow">
      <CardHeader className="flex-shrink-0">
        <CardTitle className="text-2xl flex items-center">
            <ListFilter className="mr-2 h-6 w-6 text-primary"/>
            Available Auto Xpress Garages
        </CardTitle>
        {noSpecificMatch ? (
           <CardDescription className="text-sm">
            No Auto Xpress garages specifically listed for "{issueType || 'your issue'}" {userLocation ? 'nearby' : ''}. 
            Showing all available garages. You can check towns like Kampala, Entebbe, Mukono, Jinja, or Mbarara.
          </CardDescription>
        ) : (
          <CardDescription className="text-sm">
            Showing Auto Xpress garages {issueType ? `that can handle "${issueType}"` : ''} {userLocation ? 'sorted by distance.' : 'sorted by estimated arrival time.'}
          </CardDescription>
        )}
         {userLocation && (
          <p className="text-xs text-muted-foreground mt-1 flex items-center">
            <MapPinned className="mr-1.5 h-3.5 w-3.5" /> Your location: {userLocation.lat.toFixed(3)}, {userLocation.lng.toFixed(3)}
          </p>
        )}
      </CardHeader>
      <CardContent className="flex-grow flex flex-col min-h-0">
        {displayedProviders.length === 0 && !isLoading ? (
            <Alert variant="default" className="mt-4">
              <SearchX className="h-5 w-5" />
              <AlertTitle className="font-semibold">No Auto Xpress Garages Found</AlertTitle>
              <AlertDescription>
                Unfortunately, we couldn't find any Auto Xpress garages at this time matching your criteria. 
                Please try broadening your search or check back later. Admins can add more garages in the portal.
              </AlertDescription>
            </Alert>
        ) : (
          <ScrollArea className="h-full pr-3">
            <div className="space-y-4">
              {displayedProviders.map((provider) => (
                <ProviderCard key={provider.id} provider={provider} onSelectProvider={onSelectProvider} />
              ))}
            </div>
          </ScrollArea>
        )}
      </CardContent>
    </Card>
  );
};

export default ProviderList;
